//Template for all Browser css3 
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
   -khtml-#{$property}: #{$value};
     -moz-#{$property}: #{$value};
      -ms-#{$property}: #{$value};
       -o-#{$property}: #{$value};
          #{$property}: #{$value};
}

//Backgrounds, Borders, css3 elements
@mixin background-size($width: 100%, $height: $width) {
  @if type-of($width) == 'number' and $height != null {
    @include css3-prefix('background-size', $width $height);
  } @else {
    @include css3-prefix('background-size', $width);
  }
}

@mixin background-opacity($color: #000, $opacity: 0.85) {
  background: $color;
  background: rgba($color, $opacity);
}

@mixin border-radius($radius: 5px) {
    @include css3-prefix('border-radius', $radius);
}

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
  -webkit-border-top-left-radius:     $topLeftRadius;
  -webkit-border-top-right-radius:    $topRightRadius;
  -webkit-border-bottom-right-radius: $bottomRightRadius;
  -webkit-border-bottom-left-radius:  $bottomLeftRadius;

  -moz-border-radius-topleft:     $topLeftRadius;
  -moz-border-radius-topright:    $topRightRadius;
  -moz-border-radius-bottomright: $bottomRightRadius;
  -moz-border-radius-bottomleft:  $bottomLeftRadius;

  border-top-left-radius:     $topLeftRadius;
  border-top-right-radius:    $topRightRadius;
  border-bottom-right-radius: $bottomRightRadius;
  border-bottom-left-radius:  $bottomLeftRadius;
}

@mixin box($orient: horizontal, $pack: center, $align: center) {
  display: -webkit-box;
  display: -moz-box;
  display: box;

  @include css3-prefix('box-orient', $orient);
  @include css3-prefix('box-pack', $pack);
  @include css3-prefix('box-align', $align);
}

@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
  @if ($inset != "") {
    @include css3-prefix('box-shadow', $inset $x $y $blur $color);
  } @else {
    @include css3-prefix('box-shadow', $x $y $blur $color);
  }
}

@mixin box-sizing($type: border-box) {
  @include css3-prefix('box-sizing', $type);
}

@mixin columns($count: 3, $gap: 10) {
  @include css3-prefix('column-count', $count);
  @include css3-prefix('column-gap', $gap);
}

@mixin flex($value: 1) {
  @include css3-prefix('box-flex', $value);
}

@mixin flip($scaleX: -1) {
  @include css3-prefix('transform', scaleX($scaleX));
  filter:            FlipH;
  -ms-filter:        "FlipH";
}

@mixin opacity($opacity: 0.5) {
    $opacityMultiplied: ($opacity * 100);
    
    filter:         alpha(opacity=$opacityMultiplied);
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
    @include css3-prefix('opacity', $opacity);
}


@mixin outline-radius($radius: 5px) {
  @include css3-prefix('outline-radius', $radius);
}

@mixin resize($direction: both) {
  @include css3-prefix('resize', $direction);
}

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  @include css3-prefix('transform', rotate($deg + deg));
  filter: progid:DXImageTransform.Microsoft.Matrix(
       M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
    zoom: 1;
}

@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

@mixin transform($params) {
  @include css3-prefix('transform', $params);
}

@mixin transform-style($style: preserve-3d) {
  @include css3-prefix('transform-style', $style);
}

@mixin transition($what: all, $length: 0.3s, $easing: ease-in-out) {
  @include css3-prefix('transition', $what $length $easing);
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  @include css3-prefix('animation', $str);
}


//Fonts
@mixin font-face($fontFamily: myFont, $ttfFileSrc: 'myFont.ttf') {
  font-family: $fontFamily;
  src: url($ttfFileSrc)  format('truetype');
}


//Responsiveness
$screen-4k: 3900px;
$screen-extra-lg: 2150px;
$screen-lg: 1199px; 
$screen-md: 991px;
$screen-sm: 767px;
$screen-xs: 480px;
@mixin maxextralg{
  @media (max-width: #{$screen-extra-lg}){
    @content;
  }
}
@mixin maxlg{
  @media (max-width: #{$screen-lg}){
    @content;
  }
}
@mixin maxmd{
  @media (max-width: #{$screen-md}){
    @content;
  }
}
@mixin maxsm{
  @media (max-width: #{$screen-sm}){
    @content;
  }
}
@mixin maxxs{
  @media (max-width: #{$screen-xs}){
    @content;
  }
}


@mixin minextralg{
  @media (min-width: #{$screen-extra-lg + 1}){
    @content;
  }
}
@mixin minlg{
  @media (min-width: #{$screen-lg + 1}){
    @content;
  }
}
@mixin minmd{
  @media (min-width: #{$screen-md + 1}){
    @content;
  }
}
@mixin minsm{
  @media (min-width: #{$screen-sm + 1}){
    @content;
  }
}
@mixin minxs{
  @media (min-width: #{$screen-xs + 1}){
    @content;
  }
}


@mixin xstosm{
  @media (min-width: #{($screen-xs + 1)}) and (max-width: #{$screen-sm}){
    @content;
  }
}
@mixin smtomd{
  @media (min-width: #{($screen-sm + 1)}) and (max-width: #{$screen-md}){
    @content;
  }
}
@mixin smtolg{
  @media (min-width: #{$screen-sm + 1}) and (max-width: #{$screen-lg}){
    @content;
  }
}
@mixin smtoextralg{
  @media (min-width: #{$screen-sm + 1}) and (max-width: #{$screen-extra-lg}){
    @content;
  }
}
@mixin mdtolg{
  @media (min-width: #{$screen-md + 1}) and (max-width: #{$screen-lg}){
    @content;
  }
}
@mixin mdtoextralg{
  @media (min-width: #{$screen-md + 1}) and (max-width: #{$screen-extra-lg}){
    @content;
  }
}
@mixin lgtoextralg{
  @media (min-width: #{$screen-lg + 1}) and (max-width: #{$screen-extra-lg}){
    @content;
  }
}
@mixin extralgto4k{
  @media (min-width: #{$screen-extra-lg + 1}) and (max-width: #{$screen-4k}){
    @content;
  }
}
@mixin replace($oldSelector, $newSelector){
  @at-root #{selector-replace(&, $oldSelector, $newSelector)}{
    @content;
  }
}
